1.

#include<stdio.h>
#include<string.h>
struct movies{
       char movies[50];
       float rate;
};
typedef struct movies m;

void readdata(m detail[],int n);
void printdata(m detail[],int n);
void sortingdata(m detail[],int n);
void searchingdata(m detail[],int n);

int main()
{
       m detail[100];
       int n;
       printf("enter the number of people: ");
       scanf("%d",&n);
       readdata(detail,n);
       printdata(detail,n);
       sortingdata(detail,n);
       searchingdata(detail,n);
       return 0;

     

       
}
void readdata(m detail[],int n){
       int i;
       for( i=0;i<n;i++){
        printf("enter the details of movie %d:\n",i+1);
       scanf("%s %f",detail[i].movies,&detail[i].rate);
       }

}
void printdata(m detail[],int n){
       int i;
       printf("the data are:\n");
       for(i=0;i<n;i++){
              printf("Title:%s   Rating:%.2f\n",detail[i].movies,detail[i].rate);
       }
    

}
void sortingdata(m detail[],int n){
       int i;
       int j;
       m temp;
       printf("after sorting:\n");
       for(i=0;i<n-1;i++){
              for(j=i+1;j<n;j++){
              if(detail[i].rate<detail[j].rate){
                     temp=detail[j];
                     detail[j]=detail[i];
                     detail[i]=temp;
              }

              }
       }
       printf("the data are:\n");
       for(i=0;i<n;i++){
              printf("Title:%s   Rating:%.2f\n",detail[i].movies,detail[i].rate);
       }
     
       
}
void searchingdata(m detail[],int n){
       char searchs[60];
       int i;
       printf("enter movie to search:\n");
       scanf("%s",searchs);
       for(i=0;i<n;i++){
              if(strcmp(detail[i].movies,searchs)==0)
              printf("found:Title:%s   Rating:%.2f\n",detail[i].movies,detail[i].rate);

       }
       
}

2.
#include <stdio.h>
#include <string.h>

struct inventory {
    char item[50];
    int quantity;
};

typedef struct inventory Inventory;

void readInventory(Inventory items[], int n);
void printInventory(Inventory items[], int n);
void sortInventory(Inventory items[], int n);
int binarySearch(Inventory items[], int n, char key[]);
void checkLowStock(Inventory items[], int n);

int main() {
    Inventory items[100];
    int n;
    char searchItem[50];

    printf("Enter number of products: ");
    scanf("%d", &n);
    readInventory(items, n);

    printf("\nInventory List:\n");
    printInventory(items, n);

    sortInventory(items, n);
    printf("\nSorted Inventory by Quantity:\n");
    printInventory(items, n);

    printf("\nEnter item to search: ");
    scanf(" %n", searchItem);

    int index = binarySearch(items, n, searchItem);
    if (index != -1) {
        printf("Found: %s (Quantity: %d)\n", items[index].item, items[index].quantity);
    } else {
        printf("Item not found!\n");
    }

    printf("\nLow Stock Items (<5 units):\n");
    checkLowStock(items, n);

    return 0;
}

void readInventory(Inventory items[], int n) {
    for (int i = 0; i < n; i++) {
        printf("Enter Item Name and Quantity: ");
        scanf(" %n %d", items[i].item, &items[i].quantity);
    }
}

void printInventory(Inventory items[], int n) {
    for (int i = 0; i < n; i++) {
        printf("%s (Quantity: %d)\n", items[i].item, items[i].quantity);
    }
}

void sortInventory(Inventory items[], int n) {
    for (int i = 0; i < n - 1; i++) {
        for (int j = i + 1; j < n; j++) {
            if (items[i].quantity > items[j].quantity) {
                Inventory temp = items[i];
                items[i] = items[j];
                items[j] = temp;
            }
        }
    }
}

int binarySearch(Inventory items[], int n, char key[]) {
    int left = 0, right = n - 1;
    while (left <= right) {
        int mid = left + (right - left) / 2;
        int cmp = strcmp(items[mid].item, key);
        if (cmp == 0) return mid;
        else if (cmp < 0) left = mid + 1;
        else right = mid - 1;
    }
    return -1;
}

void checkLowStock(Inventory items[], int n) {
    int found = 0;
    for (int i = 0; i < n; i++) {
        if (items[i].quantity < 5) {
            printf("%s (Quantity: %d)\n", items[i].item, items[i].quantity);
            found = 1;
        }
    }
    if (!found) {
        printf("No low stock items!\n");
    }
}


3.
#include <stdio.h>
#include <string.h>

struct inventory {
    char item[50];
    int quantity;
};

typedef struct inventory Inventory;

void readInventory(Inventory items[], int n);
void printInventory(Inventory items[], int n);
void sortInventory(Inventory items[], int n);
int binarySearch(Inventory items[], int n, char key[]);
void checkLowStock(Inventory items[], int n);

int main() {
    Inventory items[100];
    int n;
    char searchItem[50];

    printf("Enter number of products: ");
    scanf("%d", &n);
    readInventory(items, n);

    printf("\nInventory List:\n");
    printInventory(items, n);

    sortInventory(items, n);
    printf("\nSorted Inventory by Quantity:\n");
    printInventory(items, n);

    printf("\nEnter item to search: ");
    scanf(" %[^\n]", searchItem);

    int index = binarySearch(items, n, searchItem);
    if (index != -1) {
        printf("Found: %s (Quantity: %d)\n", items[index].item, items[index].quantity);
    } else {
        printf("Item not found!\n");
    }

    printf("\nLow Stock Items (<5 units):\n");
    checkLowStock(items, n);

    return 0;
}

void readInventory(Inventory items[], int n) {
    for (int i = 0; i < n; i++) {
        printf("Enter Item Name and Quantity: ");
        scanf(" %[^\n] %d", items[i].item, &items[i].quantity);
    }
}

void printInventory(Inventory items[], int n) {
    for (int i = 0; i < n; i++) {
        printf("%s (Quantity: %d)\n", items[i].item, items[i].quantity);
    }
}

void sortInventory(Inventory items[], int n) {
    for (int i = 0; i < n - 1; i++) {
        for (int j = i + 1; j < n; j++) {
            if (items[i].quantity > items[j].quantity) {
                Inventory temp = items[i];
                items[i] = items[j];
                items[j] = temp;
            }
        }
    }
}

int binarySearch(Inventory items[], int n, char key[]) {
    int left = 0, right = n - 1;
    while (left <= right) {
        int mid = left + (right - left) / 2;
        int cmp = strcmp(items[mid].item, key);
        if (cmp == 0) return mid;
        else if (cmp < 0) left = mid + 1;
        else right = mid - 1;
    }
    return -1;
}

void checkLowStock(Inventory items[], int n) {
    int found = 0;
    for (int i = 0; i < n; i++) {
        if (items[i].quantity < 5) {
            printf("%s (Quantity: %d)\n", items[i].item, items[i].quantity);
            found = 1;
        }
    }
    if (!found) {
        printf("No low stock items!\n");
    }
}

